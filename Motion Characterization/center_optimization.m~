function  [x]=center_optimization()
    raw = load('calibration_busa.mat');
    % x vector (1:3) -> virtual tool params, (4:6) -> center
    data = raw.CalibrationDataBusa;
    data_xyz = data(:,1:3);
    data_ear = (pi/180)*data(:,4:6);
    rot_mat = @(a,e,r)[cos(e)*cos(a) cos(e)*sin(a) -sin(e);-cos(r)*sin(a)+sin(r)*sin(e)*cos(a) cos(r)*cos(a)+sin(r)*sin(e)*sin(a) sin(r)*cos(e);sin(r)*sin(a)+cos(r)*sin(e)*cos(a) -sin(r)*cos(a)+cos(r)*sin(e)*sin(a) cos(r)*cos(e)];
    
    num_points = size(data_xyz,1);   
    figure(1)
    plot3(data_xyz(:,1),data_xyz(:,2),data_xyz(:,3))
    
    options = optimset('MaxFunEvals',100000,'Display','iter');
    function f_out = objectivefcn1(x)
        f_ = [0 0 0]';
        for k = 1:num_points
            point = data_xyz(k,:);
            temp = (point'+rot_mat(data_ear(k,1),data_ear(k,2),data_ear(k,3))'*[x(1);x(2);x(3)] - [x(4);x(5);x(6)]).^2;
            f_ = f_ + temp;
            % f = f + (point'+rot_mat(data_ear(k,1),data_ear(k,2),data_ear(k,3))'*[x(1);x(2);x(3)] - [x(4);x(5);x(6)]).^2;
        end     
        f_out = sum(f_)/num_points;
       
    end
    x0 = [0.5,0,0,-1.5,8.5,-1];
    % does not need neader mead. 
    x = fmincon(@objectivefcn1, x0,[],[],[],[],[],[],[], options);
end

function center = calc_center(datum)
    data_xyz = data(:,1:3);
    data_ear = (pi/180)*data(:,4:6);
    rot_mat = @(a,e,r)[cos(e)*cos(a) cos(e)*sin(a) -sin(e);-cos(r)*sin(a)+sin(r)*sin(e)*cos(a) cos(r)*cos(a)+sin(r)*sin(e)*sin(a) sin(r)*cos(e);sin(r)*sin(a)+cos(r)*sin(e)*cos(a) -sin(r)*cos(a)+cos(r)*sin(e)*sin(a) cos(r)*cos(e)];
    
end